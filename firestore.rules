rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Rate limiting function (100 reads per minute per user)
    function requestLimitNotExceeded() {
      let minuteAgo = request.time - duration.value(1, 'm');
      let recentReads = getCountFromServer(/databases/$(database)/documents/users/$(request.auth.uid)/readCounts/$(request.time.toDate().format("%Y-%m-%d-%H-%M"))).count;
      return recentReads < 100;
    }
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.user_type == 'admin';
    }
    
    function isLandlord() {
      return isAuthenticated() && get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.user_type == 'landlord';
    }
    
    function isAgent() {
      return isAuthenticated() && get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.user_type == 'agent';
    }
    
    function isVerifiedLandlord() {
      return isLandlord() && get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.verification_status == 'verified';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // User profiles
    match /profiles/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Prevent deletions in free tier
    }

    // Properties collection - optimize for read-heavy operations
    match /properties/{propertyId} {
      allow read: if true; // Public reads allowed
      allow create: if isAuthenticated() 
        && request.resource.size < 1048576; // 1MB document size limit
      allow update: if isAuthenticated() 
        && request.resource.data.owner_id == request.auth.uid
        && request.resource.size < 1048576;
      allow delete: if false; // Prevent deletions in free tier
    }

    // Messages - implement strict limits
    match /messages/{messageId} {
      allow read: if isAuthenticated() 
        && requestLimitNotExceeded();
      allow create: if isAuthenticated()
        && request.resource.size < 256000; // 256KB limit per message
      allow update, delete: if false; // Immutable messages
    }

    // Applications - essential functionality only
    match /applications/{applicationId} {
      allow read: if isAuthenticated()
        && (request.auth.uid in resource.data.participants);
      allow create: if isAuthenticated()
        && request.resource.size < 512000; // 512KB limit
      allow update: if isAuthenticated()
        && (request.auth.uid in resource.data.participants)
        && request.resource.size < 512000;
      allow delete: if false; // Prevent deletions
    }

    // Saved properties - minimal storage
    match /saved_properties/{savedId} {
      allow read: if isAuthenticated()
        && request.auth.uid == resource.data.user_id;
      allow create: if isAuthenticated()
        && request.auth.uid == request.resource.data.user_id
        && request.resource.size < 64000; // 64KB limit
      allow delete: if isAuthenticated()
        && request.auth.uid == resource.data.user_id;
    }
  }
}