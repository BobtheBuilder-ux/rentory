rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isValidImage() {
      return request.resource.contentType.matches('image/.*') 
        && request.resource.size < 2 * 1024 * 1024; // 2MB limit for images
    }

    function isValidDocument() {
      return (request.resource.contentType.matches('application/pdf') 
        || request.resource.contentType.matches('image/.*'))
        && request.resource.size < 5 * 1024 * 1024; // 5MB limit for documents
    }

    // Profile images - strict size limits
    match /profiles/{userId}/{fileName} {
      allow read: if true;
      allow write: if isAuthenticated() 
        && isOwner(userId) 
        && isValidImage();
    }

    // Property images - optimize for storage
    match /properties/{propertyId}/{fileName} {
      allow read: if true;
      allow create: if isAuthenticated() 
        && isValidImage()
        && fileName.matches('.*\\.(jpg|jpeg|png|webp)$'); // Enforcing efficient formats
      allow delete: if isAuthenticated() 
        && (resource.metadata.ownerId == request.auth.uid);
    }

    // Verification documents
    match /verification/{userId}/{fileName} {
      allow read: if isAuthenticated() 
        && isOwner(userId);
      allow write: if isAuthenticated() 
        && isOwner(userId) 
        && isValidDocument();
    }

    // Message attachments - minimal storage usage
    match /messages/{messageId}/{fileName} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated()
        && request.resource.size < 1 * 1024 * 1024; // 1MB limit
      allow delete: if false;
    }
  }
}